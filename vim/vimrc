" cosmoslx's own vim setting
" Mon Sep  5 12:27:04 CST 2011
" Wed Mar  9 23:13:02 CST 2011
" Mon Jan 23 23:13:38 CST 2012	add VAM to manager vim plugins
" Tue Jan 24 00:18:09 CST 2012  using VAM to add surround,gitv,vimwiki
" Thu Jan 26 18:12:24 CST 2012  add visual-mode */# search
" Sat Feb 11 10:23:38 CST 2012  add fcitx,repeat, altercation/vim-colors-solarized 
" Sat Feb 11 11:22:31 CST 2012	try and disable neocomplcache, TabBar
" Tue Feb 14 15:35:03 CST 2012	add snipmate and snippets,zencoding,Mark%2666
" 2012-02-14 16:30	add delimitMate
" 2012-02-14 20:47	add Better_CSS_Syntax_for_Vim
" 2012-02-14 21:36	add EasyMotion
" 2012-02-17 15:11	add arpeggio,TabBar,Python-mode-klen,mru,DrawIt
" 2012-02-22 15:54	add AutoComplPop, L9(AutoCompPop depends on it)

"--------------------------------------
"	general setting 
"--------------------------------------

" gui no toolbar show
"set go-=T

"set encoding=gbk
"let &termencoding=&encoding
"set fileencodings=utf-8,gbk,utf-16,big5
"set colorcolumn=80
set fileencodings=utf-8,chinese,utf-16,big5

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" let cursor always in middle
" set scrolloff=999

" do not keep a backup file, use versions instead
set nobackup
set notimeout
set nottimeout
set ruler	
set history=5000
set showcmd	
set incsearch		
set wrap
"set number
set guifont=Droid\ Sans\ Mono\ Slashed\ 13
set path=.,/usr/include
set tabstop=4
set shiftwidth=4    " indent width
set expandtab		" always replace tab to space
set autoindent		" always set autoindenting on

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END
endif 

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif
"set lazyredraw
"setlocal spell spelllang=en

"--------------------------------------
"	key mapping 
"--------------------------------------

let mapleader=","
vnoremap * y/<C-R>"<CR>
vnoremap # y?<C-R>"<CR>

nmap <C-j> gt
nmap <C-k> gT
imap <C-j> <ESC>gt
imap <C-k> <ESC>gT

"imap <leader>c <ESC>:RopeCodeAssist<cr>
nmap <SPACE> <C-f>
nmap t <Esc>:tabnew 
nmap <leader>p "+p
"nmap <leader>f _f
"nmap <leader>F _F
nmap <leader>f <leader><leader>f
nmap <leader>F <leader><leader>F
nmap <leader>v :Voom vimwiki<cr>
nmap <leader>g :Git 
nmap <leader>t :tag 
nmap <leader>ev :tabnew ~/.vimrc <cr>
nmap <leader>s :source ~/.vimrc
nmap <leader>id <ESC>:read !date<cr>

nmap <silent> <F2> :MRU <cr>
nmap <F3> :NeoComplCacheToggle <cr>
nmap <silent> <F4> :call Create_tags() <cr>
nmap <silent> <F5> :TagbarToggle <cr>
" nmap <silent> <F5> :Tlist <cr>
nmap <silent> <F6> :Ex <cr>
function Create_tags()
	!ctags -R --c-kinds=+p --fields=+iaS --extra=+q *
	!cscope -Rbq 
endfunc

" ----- fugitive mapping ------
	nmap <leader>gs :Gstatus <cr>
	nmap <leader>ge :Gedit
    nmap <leader>gd :Gdiff <cr>

" ----- gitv mapping ------
	nmap <leader>gv :gitv <cr>
	nmap <leader>gf :gitv! <cr>

" ------ cscope mapping ------
	nmap <leader>cs :cs find s <C-R>=expand("<cword>")<CR><CR>	
	nmap <leader>cg :cs find g <C-R>=expand("<cword>")<CR><CR>	
	nmap <leader>cc :cs find c <C-R>=expand("<cword>")<CR><CR>	
	nmap <leader>ct :cs find t <C-R>=expand("<cword>")<CR><CR>	
	nmap <leader>ce :cs find e <C-R>=expand("<cword>")<CR><CR>	
	nmap <leader>cf :cs find f <C-R>=expand("<cfile>")<CR><CR>	
	nmap <leader>ci :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <leader>cd :cs find d <C-R>=expand("<cword>")<CR><CR>	

"--------------------------------------
"	VAM 
"--------------------------------------
" ### auto setup VAM
fun! SetupVAM()
  let c = get(g:, 'vim_addon_manager', {})
  let g:vim_addon_manager = c
  let c.plugin_root_dir = expand('$HOME', 1) . '/.vim/vim-addons'

  " Force your ~/.vim/after directory to be last in &rtp always:
  " let g:vim_addon_manager.rtp_list_hook = 'vam#ForceUsersAfterDirectoriesToBeLast'

  " most used options you may want to use:
  " let c.log_to_buf = 1
  " let c.auto_install = 0
  let &rtp.=(empty(&rtp)?'':',').c.plugin_root_dir.'/vim-addon-manager'
  if !isdirectory(c.plugin_root_dir.'/vim-addon-manager/autoload')
    execute '!git clone --depth=1 git://github.com/MarcWeber/vim-addon-manager '
        \       shellescape(c.plugin_root_dir.'/vim-addon-manager', 1)
  endif

  " This provides the VAMActivate command, you could be passing plugin names, too
  "call vam#ActivateAddons([], {})
endfun

call SetupVAM()

"set rtp+=~/.vim/vim-addons/vim-addon-manager
"call vam#Scripts("confiles/vim/vim_plugins", {'tag_regex': '.*'})

" cosmoslx's plugins list
let cosmoslx_plugins = [
    \ 'surround',
    \ 'gitv',
    \ 'The_NERD_Commenter',
    \ 'repeat',
    \ 'github:altercation/vim-colors-solarized',
    \ 'Emmet',
    \ 'vim-snippets',
    \ 'Mark%2666',
    \ 'delimitMate',
    \ 'Better_CSS_Syntax_for_Vim',
    \ 'EasyMotion',
    \ 'arpeggio',
    \ 'Tagbar',
    \ 'mru',
    \ 'DrawIt',
    \ 'JavaScript_syntax',
    \ 'Javascript_Indentation',
    \ 'JSON',
    \ 'jsbeautify',
    \ 'xml',
    \ 'DoxygenToolkit',
    \ 'info',
    \ 'plantuml-syntax',
    \ ]

    "\ 'AutoComplPop',
    "\ 'VOoM',
    "\ 'pig',
    "\ 'jinja',
    "\ 'vim-qt-syntax',
    "\ 'github:peterhoeg/vim-qml',
    "\ 'Vimerl'
    "\ 'vimwiki',
    "\ 'fcitx',
    "\ 'L9',
	"\ 'pylint'
    "\ 'Python-mode-klen',
	""\ 'jslint',
	"\ 'UltiSnips',
	"\ 'snipmate',
	"\ 'neocomplcache',
	"" below will block the fcitx open
	"\ 'pyflakes%2441',
	"\ 'python%790',
	"\ 'fcitx',
	"\ 'github:cosmoslx/fcitx-status', "can't enter back to chinese mode"
    
" activate the plugins
call vam#ActivateAddons(cosmoslx_plugins, {'auto_install' : 1})

" set g:vim_addon_manager must after the call vam#ActivateAddons 
	""--- don't use mercurial
	"let g:vim_addon_manager['drop_hg_sources'] = 1


"--------------------------------------
"	zencoding 
"--------------------------------------
let g:use_zen_complete_tag = 1
"let g:user_zen_expandabbr_key = '<C-k>'
"let g:user_zen_leader_key = '<C-j>'

"--------------------------------------
"	arpeggio 
"--------------------------------------
"Arpeggio inoremap jk <ESC>
call arpeggio#map('n', '', 0, 'sj', '<ESC>:w<cr>')
call arpeggio#map('in', '', 0, 'df', '<C-w>')
call arpeggio#map('in', '', 0, 'fj', '<ESC>:')
call arpeggio#map('in', '', 0, 'qj', '<ESC>:q<cr>')
call arpeggio#map('ivc', '', 0, 'jk', '<ESC>')


"--------------------------------------
"	code complete 
"--------------------------------------
"let g:completekey = "<C-d>"

"--------------------------------------
"	neocomplcache 
"--------------------------------------

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache at startup.
let g:neocomplcache_enable_at_startup = 0
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" AutoComplPop like behavior.
let g:neocomplcache_enable_auto_select = 1

" Recommended key-mappings.
" <CR>: close popup and save indent.
"inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
"inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Define dictionary.
"let g:neocomplcache_dictionary_filetype_lists = {
    "\ 'default' : '',
    "\ 'vimshell' : $HOME.'/.vimshell_hist',
    "\ 'scheme' : $HOME.'/.gosh_completions'
    "\ }

"--------------------------------------
"	solarized colorscheme 
"--------------------------------------

if has('gui_running')
    set background=light
	colorscheme solarized
else
    set background=dark
	colorscheme desert
endif

let g:solarized_contrast="high"    "default value is normal
let g:solarized_visibility="high"    "default value is normal
syntax enable

""------------------------------------------------------------------
""The following items are available options, but do not need to be
""included in your .vimrc as they are currently set to their defaults.

" let g:solarized_termtrans=0
" let g:solarized_degrade=0
" let g:solarized_bold=1
" let g:solarized_underline=1
" let g:solarized_italic=1
" let g:solarized_termcolors=16
" let g:solarized_diffmode="normal"
" let g:solarized_hitrail=0
" let g:solarized_menu=1

"--------------------------------------
"	vimwiki setting 
"--------------------------------------
let g:vimwiki_use_mouse=1
let g:vimwiki_list=[{'path': '/home/cosmoslx/resource/kbase/', 'path_html': '/home/cosmoslx/resource/kbase/html','nested_syntaxes':{'python': 'python','c++': 'cpp','c': 'c','sh': 'sh','awk': 'awk','django': 'django','html': 'html','javascript': 'javascript','json': "javascript",'sql': "sql"}}]
let g:vimwiki_folding=0 
let g:vimwiki_camel_case=0 
let g:vimwiki_CJK_length=1 
let g:vimwiki_html_header_numbering=2
let g:vimwiki_hl_headers=1

"--------------------------------------
"	TagBar 
"--------------------------------------

let g:tagbar_left=1
let g:tagbar_width=20
let g:tagbar_compact=1
let g:tagbar_expand=1
let g:tagbar_foldlevel=3
let g:tagbar_autoshowtag=1

"--------------------------------------
"	fugitive 
"--------------------------------------

set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P


"--------------------------------------
"	Tlist 
"--------------------------------------
set tags=tags;
"set autochdir
let Tlist_Exit_OnlyWindow=1
let Tlist_Compact_Format=1
let Tlist_Show_One_File=1
let Tlist_WinWidth=20


"--------------------------------------
"	cscope setting 
"--------------------------------------

""from http://cscope.sourceforge.net/cscope_maps.vim

if has("cscope")
    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag
    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=1
		" set cscope relativedir ,to ensure to correct goto path,the newer versions support
		"set csre 
    if filereadable("cscope.out")
		" add any cscope database in current directory
        cs add cscope.out  
    elseif $CSCOPE_DB != ""
		" add the database pointed to by environment variable 
        cs add $CSCOPE_DB/cscope.out
    endif

    " show msg when any other cscope db added
    set cscopeverbose  
endif

"------------------------------------ 
" 	autocomplpop 
"------------------------------------ 

let g:acp_mappingDriven = 1
let g:acp_ignorecaseOption = 1
"let g:pumselect=0
"inoremap <expr><tab> MaySelect()
"function MaySelect()
	"if(pumvisible())
		"return "\<Down>"
	"endif
		"return "\<Tab>"
"endfunc 
 
"inoremap <expr><space> MayComplete()
"function MayComplete()
	"if(pumvisible())
		"return "\<tab>"
	"endif
	"return "\<space>"
"endfunc

"------------------------------------ 
"	DoxygenToolKit
"------------------------------------ 
let g:DoxygenToolkit_authorName="Cosmoslx"
let g:load_doxygen_syntax=1
let g:DoxygenToolkit_licenseTag="GPL"

"let g:DoxygenToolkit_undocTag="DOXIGEN_SKIP_BLOCK"
"let g:DoxygenToolkit_briefTag_pre = "@brief\t"
"let g:DoxygenToolkit_paramTag_pre = "@param\t"
"let g:DoxygenToolkit_returnTag = "@return\t"
"let g:DoxygenToolkit_briefTag_funcName = "no"
"let g:DoxygenToolkit_maxFunctionProtoLines = 30
"let g:DoxygenToolkit_blockHeader="------------------------------------------------------------------------"
"let g:DoxygenToolkit_blockFooter="------------------------------------------------------------------------" 



"--------------------------------------
"	pylint	
"--------------------------------------
"autocmd FileType python compiler pylint
let g:pymode_lint_write = 0 
nnoremap <leader>p :PyLint<cr> 


"--------------------------------------
"	cmj temp 20130712	
"--------------------------------------
set foldlevel=99

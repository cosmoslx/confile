" cosmoslx's own vim setting
" Mon Sep  5 12:27:04 CST 2011
" Wed Mar  9 23:13:02 CST 2011
" Mon Jan 23 23:13:38 CST 2012	add VAM to manager vim plugins
" Tue Jan 24 00:18:09 CST 2012  using VAM to add surround,gitv,vimwiki
" Thu Jan 26 18:12:24 CST 2012  add visual-mode */# search
" Sat Feb 11 10:23:38 CST 2012  add fcitx,repeat, altercation/vim-colors-solarized 
" Sat Feb 11 11:22:31 CST 2012	try and disable neocomplcache, TabBar
" Tue Feb 14 15:35:03 CST 2012	add snipmate and snippets,zencoding,Mark%2666
" 2012-02-14 16:30	add delimitMate
" 2012-02-14 20:47	add Better_CSS_Syntax_for_Vim
" 2012-02-14 21:36	add EasyMotion
" 2012-02-17 15:11	add arpeggio,TabBar,Python-mode-klen,mru,DrawIt

"******** VAM ********
set rtp+=~/.vim/vim-addons/vim-addon-manager

" cosmoslx's plugins list
let cosmoslx_plugins = [
	\ 'surround',
	\ 'gitv',
	\ 'vimwiki',
	\ 'The_NERD_Commenter',
	\ 'VOoM',
	\ 'fcitx',
	\ 'repeat',
	\ 'github:altercation/vim-colors-solarized',
	\ 'ZenCoding',
	\ 'snipmate',
	\ 'snipmate-snippets',
	\ 'Mark%2666',
	\ 'delimitMate',
	\ 'Better_CSS_Syntax_for_Vim',
	\ 'EasyMotion',
	\ 'arpeggio',
	\ 'Tagbar',
	\ 'Python-mode-klen',
	\ 'mru',
	\ 'DrawIt',
	\ ]

	"\ 'pyflakes%2441',
	"\ 'python%790',
    
" activate the plugins
call vam#ActivateAddons(cosmoslx_plugins, {'auto_install' : 0})

" ----- set g:vim_addon_manager must after the call vam#ActivateAddons ------
" don't use mercurial
"let g:vim_addon_manager['drop_hg_sources'] = 1

"--------------------------------------
"********** general setting *********
"--------------------------------------
"
"set lazyredraw
set number
"setlocal spell spelllang=en
set guifont=Droid\ Sans\ Mono\ Slashed\ 13
set path=.,/usr/include
set tabstop=4
set shiftwidth=4    " indent width
let mapleader=","

"--------------------------------------
"********** arpeggio *********
"--------------------------------------
"Arpeggio inoremap jk <ESC>
call arpeggio#map('n', '', 0, 'sj', '<ESC>:w<cr>')
call arpeggio#map('in', '', 0, 'df', '<C-w>')
call arpeggio#map('in', '', 0, 'fj', '<ESC>:')
call arpeggio#map('in', '', 0, 'qj', '<ESC>:q<cr>')
call arpeggio#map('ivc', '', 0, 'jk', '<ESC>')

"--------------------------------------
"********** code complete *************	
"--------------------------------------
"let g:completekey = "<A-d>"

"--------------------------------------
"********** neocomplcache *************	
"--------------------------------------

"--------------------------------------
"******** solarized colorscheme *******
"--------------------------------------
if has('gui_running')
    set background=light
	colorscheme solarized
else
    set background=dark
	colorscheme evening
endif
let g:solarized_contrast="high"    "default value is normal
let g:solarized_visibility="high"    "default value is normal
syntax enable
" ------------------------------------------------------------------
" The following items are available options, but do not need to be
" included in your .vimrc as they are currently set to their defaults.

" let g:solarized_termtrans=0
" let g:solarized_degrade=0
" let g:solarized_bold=1
" let g:solarized_underline=1
" let g:solarized_italic=1
" let g:solarized_termcolors=16
" let g:solarized_diffmode="normal"
" let g:solarized_hitrail=0
" let g:solarized_menu=1

"--------------------------------------
"********** vimwiki setting *********
"--------------------------------------
let g:vimwiki_use_mouse=1
let g:vimwiki_list=[{'path': '/home/cosmoslx/github/vimwiki/', 'path_html': '/home/cosmoslx/github/vimwiki/html','nested_syntaxes':{'python': 'python','c++': 'cpp','c': 'c','sh': 'sh','awk': 'awk','django': 'django','html': 'html','javascript': 'javascript','json': "javascript"}}]
let g:vimwiki_folding=0 
let g:vimwiki_camel_case=0 
let g:vimwiki_CJK_length=1 
let g:vimwiki_html_header_numbering=2
let g:vimwiki_hl_headers=1

"********** TagBar setting *********
" Tue Aug 16 09:28:19 CST 2011
let g:tagbar_left=1
let g:tagbar_width=20
let g:tagbar_compact=1
let g:tagbar_expand=1
let g:tagbar_foldlevel=3
let g:tagbar_autoshowtag=1

"********** fugitive setting *************
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

"********** key mapping *************
vnoremap * y/<C-R>"<CR>
vnoremap # y?<C-R>"<CR>

nmap <SPACE> <C-f>
map <C-j> gt
map <C-k> gT
"imap <leader>c <ESC>:RopeCodeAssist<cr>
nmap t <Esc>:tabnew 

nmap <leader>p "+p
"nmap <leader>f _f
"nmap <leader>F _F
nmap <leader>f <leader><leader>f
nmap <leader>F <leader><leader>F
nmap <leader>v :Voom vimwiki<cr>
nmap <leader>g :Git 
nmap <leader>t :tag 
nmap <leader>ev :tabnew ~/.vimrc <cr>
nmap <leader>s :source ~/.vimrc
nmap <leader>id :read !date <cr>

nmap <silent> <F2> :MRU <cr>
nmap <silent> <F4> :call Create_tags() <cr>
function Create_tags()
	!ctags -R --c-kinds=+p --fields=+iaS --extra=+q *
	!cscope -Rbq 
endfunc

" nmap <silent> <F5> :Tlist <cr>
nmap <silent> <F5> :TagbarToggle <cr>
nmap <silent> <F6> :Ex <cr>

" ----- fugitive mapping ------
	nmap <leader>gs :Gstatus <cr>
	nmap <leader>ge :Gedit
    nmap <leader>gd :Gdiff <cr>

" ----- gitv mapping ------
	nmap <leader>gv :gitv <cr>
	nmap <leader>gf :gitv! <cr>

" ------ cscope mapping ------
	nmap <leader>cs :cs find s <C-R>=expand("<cword>")<CR><CR>	
	nmap <leader>cg :cs find g <C-R>=expand("<cword>")<CR><CR>	
	nmap <leader>cc :cs find c <C-R>=expand("<cword>")<CR><CR>	
	nmap <leader>ct :cs find t <C-R>=expand("<cword>")<CR><CR>	
	nmap <leader>ce :cs find e <C-R>=expand("<cword>")<CR><CR>	
	nmap <leader>cf :cs find f <C-R>=expand("<cfile>")<CR><CR>	
	nmap <leader>ci :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <leader>cd :cs find d <C-R>=expand("<cword>")<CR><CR>	

"********** OmnicppComplete ***********
" set completeopt=menu "cancel show up define menu

"********** Tlist setting ***********
set tags=tags;
"set autochdir
let Tlist_Exit_OnlyWindow=1
let Tlist_Compact_Format=1
let Tlist_Show_One_File=1
let Tlist_WinWidth=20

"********* cscope setting ***********
" from http://cscope.sourceforge.net/cscope_maps.vim
" This tests to see if vim was configured with the '--enable-cscope' option
" when it was compiled.  If it wasn't, time to recompile vim... 
if has("cscope")

    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=1

	" set cscope relativedir ,to ensure to correct goto path,the newer
	" versions support
	"set csre 

    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out  
    " else add the database pointed to by environment variable 
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB/cscope.out
    endif

    " show msg when any other cscope db added
    set cscopeverbose  
endif


" ********* autocomplpop ************
let g:acp_mappingDriven = 1
let g:pumselect=0
inoremap <expr><tab> MaySelect()
function MaySelect()
	if(pumvisible())
		return "\<Down>"
	endif
		return "\<Tab>"
endfunc 
 
inoremap <expr><space> MayComplete()
function MayComplete()
	if(pumvisible())
		return "\<tab>"
	endif
	return "\<space>"
endfunc

" ********* DoxygenToolKit setting ***********
let g:DoxygenToolkit_authorName="Cosmoslx"

" from <http://www.vimer.cn/2009/10/把vim打造成一个真正的ide3.html>
let g:DoxygenToolkit_licenseTag="GPL"
"let g:DoxygenToolkit_undocTag="DOXIGEN_SKIP_BLOCK"
"let g:DoxygenToolkit_briefTag_pre = "@brief\t"
"let g:DoxygenToolkit_paramTag_pre = "@param\t"
"let g:DoxygenToolkit_returnTag = "@return\t"
"let g:DoxygenToolkit_briefTag_funcName = "no"
"let g:DoxygenToolkit_maxFunctionProtoLines = 30
"let g:DoxygenToolkit_blockHeader="------------------------------------------------------------------------"
"let g:DoxygenToolkit_blockFooter="------------------------------------------------------------------------" 


" ********** example setting *********
" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Jul 02
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set nobackup		" keep a backup file
endif
set history=5000		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif
